plugins {
  id 'java'
  id 'checkstyle'
  id 'jacoco-report-aggregation'
  id 'org.springframework.boot'
}

apply plugin: 'jacoco-report-aggregation'

dependencies {
  implementation project(':api')
  implementation project(':service')
  implementation project(':persistence')
}

def static jacocoExcludes() {
  return [
      '**/io/github/aj8gh/**/Application.*',
  ]
}

tasks.named('check') {
  dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}

testCodeCoverageReport {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: jacocoExcludes())
    }))
  }
}

def disable = { enabled = false }
def enable = { enabled = true }

allprojects {
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.dependency-management'

  group = groupId
  version = projectVersion

  repositories {
    mavenCentral()
    mavenLocal()
  }

  java {
    toolchain {
      languageVersion.set(JavaLanguageVersion.of(javaVersion))
    }
  }

  bootJar disable
  jar enable
}

subprojects {
  apply plugin: 'org.springframework.boot'
  apply plugin: 'jacoco'

  dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation platform('org.junit:junit-bom')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.awaitility:awaitility'
  }

  bootJar disable
  jar enable

  test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
  }

  jacocoTestReport {
    dependsOn test
    afterEvaluate {
      classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it, exclude: jacocoExcludes())
      }))
    }
  }

  jacocoTestCoverageVerification {
    violationRules {
      rule {
        limit {
          minimum = new BigDecimal(minimumCoverage)
        }
      }
      setFailOnViolation(Boolean.valueOf(shouldFailOnViolation))
    }
  }
}
